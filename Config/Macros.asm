; =========================================================================================================================================================
; MegaDrive macros
; =========================================================================================================================================================
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Align
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	bound	- Size boundary
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
align		macros	bound
		cnop	0,\bound
; ---------------------------------------------------------------------------
; Pad RS to even address
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------
rseven		macros
		rs.b	__rs&1
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Push registers to stack (works on either processor)
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	regs	- Registers to push
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
push		macro	regs
		if z80prg=0
			if instr("\regs","/")|instr("\regs","-")
				movem.\0 \regs,-(sp)
			else
				move.\0	\regs,-(sp)
			endif
		else
			zpush	\regs
		endif
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Pop registers from stack (works on either processor)
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	regs	- Registers to pop
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
pop		macro	regs
		if z80prg=0
			if instr("\regs","/")|instr("\regs","-")
				movem.\0 (sp)+,\regs
			else
				move.\0	(sp)+,\regs
			endif
		else
			zpop	\regs
		endif
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Clear memory
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	starta	- Address to start clearing memory at
;	enda	- Address to finish clearing memory at
;		  (not rEQUired if there exists a label that is the same as the starting label, but with "_End" at the end of it)
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
clrRAM		macro	starta, enda
		local	endaddr
		if narg<2
endaddr			EQUS	"\starta\_End"
		else
endaddr			EQUS	"\enda"
		endif

		moveq	#0,d0

		if ((\starta)&$8000)=0
			lea	\starta,a1
		else
			lea	(\starta).w,a1
		endif
		if (\starta)&1
			move.b	d0,(a1)+
		endif

		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
.Clear\@:	move.l	d0,(a1)+
		dbf	d1,.Clear\@

		if (((\endaddr)-(\starta))-((\starta)&1))&2
			move.w	d0,(a1)+
		endif
		if (((\endaddr)-(\starta))-((\starta)&1))&1
			move.b	d0,(a1)+
		endif
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Disable SRAM access
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
sramOff		macros
		move.b	#0,SRAM_ACCESS
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Enable SRAM access
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
sramOn		macros
		move.b	#1,SRAM_ACCESS
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Disable interrupts
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
intsOff		macros
		ori	#$700,sr
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Enable interrupts
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
intsOn		macros
		andi	#$F8FF,sr
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Stop the Z80
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
doZ80Stop	macros
		move.w	#$100,Z80_BUS_REQ
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Wait for the Z80 to stop
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
waitZ80Stop	macro
.Wait\@:	btst	#0,Z80_BUS_REQ
		bne.s	.Wait\@
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Stop the Z80 and wait for it to
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
stopZ80		macro
		doZ80Stop
		waitZ80Stop
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Start the Z80
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
startZ80	macros
		move.w	#0,Z80_BUS_REQ
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Wait for the Z80 to start
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
waitZ80Start	macro
.Wait\@:	btst	#0,Z80_BUS_REQ
		beq.s	.Wait\@
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Cancel Z80 reset
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
resetZ80Off	macros
		move.w	#$100,Z80_RESET
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Reset the Z80
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
resetZ80	macros
		move.w	#0,Z80_RESET
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Wait for the YM2612 to not be busy
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
waitYM		macro
		nop
		nop
		nop
@Wait\@:	tst.b	(a0)
		bmi.s	@Wait\@
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Wait for DMA finish
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	port	- Something to represent the VDP control port (default is VDP_CTRL_PORT)
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------	
waitDMA		macro	port
.Wait\@:
		if narg>0
			move.w	\port,d1
		else
			move.w	VDP_CTRL,d1
		endif
		btst	#1,d1
		bne.s	.Wait\@
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; VDP command instruction
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	addr	- Address in VDP memory
;	type	- Type of VDP memory
;	rwd	- VDP command
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
VRAM		EQU	%100001		; VRAM
CRAM		EQU	%101011		; CRAM
VSRAM		EQU	%100101		; VSRAM
READ		EQU	%001100		; VDP read
WRITE		EQU	%000111		; VDP write
DMA		EQU	%100111		; VDP DMA
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
vdpCmd		macro	ins, addr, type, rwd, end, end2
		if narg=5
			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
		elseif narg>=6
			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
		else
			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
		endif
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; VDP DMA from 68000 memory to VDP memory
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	src	- Source address in 68000 memory
;	dest	- Destination address in VDP memory
;	len	- Length of data in bytes
;	type	- Type of VDP memory
;	a6.l	- VDP control port
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
dma68k		macro	src, dest, len, type, port
		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
		move.w	#$9700|(((\src)>>17)&$7F),(a6)
		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
		move.w	(sp)+,(a6)
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Fill VRAM with byte
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	byte	- Byte to fill VRAM with
;	addr	- Address in VRAM
;	len	- Length of fill in bytes
;	a6.l	- VDP control port
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
dmaFill		macro	byte, addr, len
		move.w	#$8F01,(a6)
		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
		move.w	#$9780,(a6)
		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
		move.w	#(\byte)<<8,-4(a6)
		waitDMA	(a6)
		move.w	#$8F02,(a6)
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Copy a region of VRAM to a location in VRAM
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	src	- Source address in VRAM
;	dest	- Destination address in VRAM
;	len	- Length of copy in bytes
;	a6.l	- VDP control port
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
dmaCopy		macro	src, dest, len
		move.w	#$8F01,(a6)
		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
		move.w	#$97C0,(a6)
		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
		waitDMA	(a6)
		move.w	#$8F02,(a6)
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Start the lag-o-meter
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
lagOn		macro
		if ENABLE_LAGMETER
			move.w	#$9193,VDP_CTRL
		endif
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Stop the lag-o-meter
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
lagOff		macro
		if ENABLE_LAGMETER
			move.w	#$9100,VDP_CTRL
		endif
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Disable display
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
displayOff	macro
		move.w	vdpReg1.w,d0
		andi.b	#%10111111,d0
		move.w	d0,VDP_CTRL
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Enable display
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
displayOn	macro
		move.w	vdpReg1.w,d0
		ori.b	#%01000000,d0
		move.w	d0,VDP_CTRL
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Move the HUD down
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
moveHUDDown	macros
		move.l	#-$80000,rHUD_Accel.w		; Set to move HUD down
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Move the HUD up
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
moveHUDUp	macros
		move.l	#$8000,rHUD_Accel.w		; Set to move HUD up
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Convert a string to the textbox's format and store as a line
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	str	- The string
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtLine		macro	str
c		= 1
		rept	strlen(\str)
ochar			substr c, c, \str
char			substr "\ochar"-$1F, "\ochar"-$1F, "skojh`aledisfsg\0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_ABCDEFGHIJKLMNOPQRSTUVWXYZncmb"
			dc.w	"\char"+$588
c			= c+1
		endr
		dc.w	$FFFF
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add a line break character to the textbox
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtLineBreak	macros
		dc.w	$FFFF
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add a message terminator character to the textbox
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtLineEnd	macros
		dc.w	0
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add an animation change flag to the textbox
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	ani	- New animation script pointer
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtNewAni	macro	ani
		dc.w	$FFFE
		dc.l	\ani
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add an icon change flag to the textbox
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	icon	- New icon art pointer
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtNewIcon	macro	icon
		dc.w	$FFFD
		dc.l	\icon
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add a finished flag to the textbox
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
txtEnd		macros
		dc.w	$FFFC
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add an entry to the level art animation script
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	duration	- Global duration
;	artaddr		- Source art
;	tileid		- Destination tile ID
;	numentries	- Number of entries
;	numvramtiles	- Number of tiles per entry
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
lvlAniDat	macro	duration, artaddr, tileid, numentries, numvramtiles
		dc.l	(\duration&$FF)<<24|\artaddr
		dc.w	((\tileid&$7FF)<<5)
		dc.b	\numentries, \numvramtiles
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Get a unique character set from a string
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	string		- String to go throuhg
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	unique_chars	- A string of unique characters found
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
getUniqueChars	macro	string
unique_chars	substr 1,1,\string
strpos		= 1

		while strpos<strlen(\string)
found			= 0
pos			= 0
char			substr strpos+1,strpos+1,\string

			while (pos<strlen("\unique_chars"))&(found=0)
uchar				substr pos+1,pos+1,"\unique_chars"
				if strcmp("\uchar","\char")|strcmp("\char", " ")
found					= 1
				endif
pos				= pos+1
			endw

			if found=0
unique_chars			equs "\unique_chars\\char"
			endif
strpos			= strpos+1

			endw
		endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Run objects macro
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
runObjects		macro
		movea.w	objExecFirst.w,a0				; load first object slot into a0
		move.l	_objAddress(a0),a1				; load its pointer to a1
		jsr	(a1)					; jump to its code
	endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Next object macro
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; RETURNS:
;	Nothing
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
nextObject		macro
		movea.w	_objNext(a0),a0				; load the next object address to a0
		move.l	_objAddress(a0),a1				; load its pointer to a1
		jmp	(a1)					; jump to its code
	endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add sprite to a display list
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	layer	- The destination display layer
;	obj 	- The address register for the source object
;	fre 	- A free-to-user address register
;	chk	- If 1, the code also checks if the object is displayed already
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
displaySprite		macro	layer, obj, fre, chk
;	if layer >= 8
;		inform 2,"Invalid display layer!"
;	endif

	if \chk
		tst.w	_objDrawNext(\obj)					; check if displayed already
		bne.s	.no\@						; if yes, skip
	endif

		move.w	#objDisplay+(\layer*dSize),_objDrawNext(\obj)	; put end marker as the next pointer
		move.w	objDisplay+dPrev+(\layer*dSize).w,\fre		; copy the pointer from the end marker to dst register
		move.w	\fre,_objDrawPrev(\obj)				; copy that to prev pointer
		move.w	\obj,_objDrawNext(\fre)				;
		move.w	\obj,objDisplay+dPrev+(\layer*dSize).w		; copy the pointer from the end marker to dst register

;		cmp.w	#objDisplay+(\layer*dSize),objDisplay+dPrev+(\layer*dSize).w	; special case: points to itself
;		bne.s	.no\@								; if no, skip
;		move.w	\obj,objDisplay+dPrev+(\layer*dSize).w				; else, copy over

.no\@
	endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Add sprite to a display list using an address register
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	reg	- The address regsister containing target
;	obj 	- The address register for the source object
;	fre 	- A free-to-user address register
;	chk	- If 1, the code also checks if the object is displayed already
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
displaySpriteReg		macro	reg, obj, fre, chk
	local layer
layer EQUR	\reg							; convert register

	if \chk
		tst.w	_objDrawNext(\reg)					; check if displayed already
		bne.s	.no\@						; if yes, skip
	endif

		move.w	layer,_objDrawNext(\obj)				; put end marker as the next pointer
		move.w	_objDrawPrev(layer),\fre				; copy the pointer from the end marker to dst register
		move.w	\fre,_objDrawPrev(\obj)				; copy that to prev pointer
		move.w	\obj,_objDrawNext(\fre)				;
		move.w	\obj,_objDrawPrev(layer)				; copy the pointer from the end marker to dst register

;		cmp.w	_objDrawPrev(layer),layer				; special case: points to itself
;		bne.s	.no\@						; if no, skip
;		move.w	\obj,_objDrawPrev(layer)				; else, copy over
.no\@
	endm
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; Remove a sprite from a display list
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
; AGUMENTS:
;	obj 	- The address register for the source object
;	fre 	- A free-to-user address register
;	chk	- If 1, the code also checks if the object is displayed already
; ---------------------------------------------------------------------------------------------------------------------------------------------------------
removeSprite		macro	obj, fre, chk
	if \chk
		tst.w	_objDrawNext(\obj)					; check if displayed already
		beq.s	.yes\@						; if not, skip
	endif

		move.w	_objDrawPrev(\obj),\fre				; load the prev pointer to dst
		move.w	_objDrawNext(\obj),_objDrawNext(\fre)			; copy the next object pointer from src to dst
		move.w	_objDrawNext(\obj),\fre				; load the next pointer to dst
		move.w	_objDrawPrev(\obj),_objDrawPrev(\fre)			; copy the prev object pointer from src to dst

;		cmp.w	_objDrawPrev(\obj),\fre				; special case: last object
;		bne.s	.no\@						; if no, skip
;		move.w	\fre,_objDrawNext(\fre)				; else, change to point to same address

.no\@
		clr.l	_objDrawNext(\obj)
.yes\@
	endm
; =========================================================================================================================================================